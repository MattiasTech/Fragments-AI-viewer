import{cm as i,co as e,cD as L,cs as T,da as $,cF as H,cp as I,cq as B,db as K,dc as U,dd as V,de as X,cP as J,cy as Q,df as Z}from"./vendor-DcICA_3z.js";const ee="gemini-2.5-flash",q="AIzaSyCLAcUjUmCV3HhC0l9rmeJKeWkuGIQlqwU",te=`You can control the BIM viewer selection with a structured command.
When the user explicitly asks you to select, highlight, filter, show, hide, isolate, or focus objects, append a single line at the end of your reply in this exact format:
SELECTION: {"action":"select","filter":{...},"mode":"highlight"}
Use "action":"clear" when the user wants to clear selections.
Choose keys inside filter that match the model data (e.g. category, type, system, name, globalId, guid).
Only emit the SELECTION line when a selection action is required. Otherwise omit it entirely.`,O="SELECTION:",se=s=>{const n=s.indexOf("{");if(n===-1)return null;let y=0,p=!1,g="";for(let l=n;l<s.length;l+=1){const r=s[l];if(p)r==='"'&&g!=="\\"&&(p=!1);else if(r==='"')p=!0;else if(r==="{")y+=1;else if(r==="}"&&(y-=1,y===0))return s.slice(n,l+1);g=r}return null},ne=s=>{if(!s)return{cleaned:s,command:null};const n=s.toUpperCase().lastIndexOf(O);if(n===-1)return{cleaned:s,command:null};const p=s.slice(n+O.length).trim().replace(/^```(?:json)?/i,"").replace(/```$/i,"").trim(),g=se(p);if(!g)return{cleaned:s,command:null};try{const l=JSON.parse(g);return!l||typeof l.action!="string"?{cleaned:s,command:null}:{cleaned:s.slice(0,n).trimEnd()||s,command:l}}catch{return{cleaned:s,command:null}}},ie=()=>{const s=q.trim();if(!s)throw new Error("MISSING_GEMINI_KEY");return new Z(s).getGenerativeModel({model:ee})},oe=({getModelDataForAI:s,isOpen:n,onOpen:y,onClose:p,expandSignal:g,onRequestSelection:l})=>{const[r,b]=i.useState(!1),[D,j]=i.useState([{role:"system",text:"Hello! I am your BIM assistant. Ask me anything about the loaded models."}]),[P,Y]=i.useState(""),[M,N]=i.useState(!1),S=i.useRef(null),[R,F]=i.useState({width:400,height:500}),k=i.useRef(null),C=i.useRef(!1),v=i.useCallback(t=>{if(!C.current)return;const o=k.current;if(!o)return;const A=t.clientX-o.startX,d=t.clientY-o.startY,a=320,c=260;F(h=>{const f=Math.max(a,o.width+A),u=Math.max(c,o.height+d);return f===h.width&&u===h.height?h:{width:Math.round(f),height:Math.round(u)}})},[]),w=i.useCallback(()=>{C.current&&(C.current=!1,k.current=null,window.removeEventListener("pointermove",v),window.removeEventListener("pointerup",w))},[v]),W=i.useCallback(t=>{t.preventDefault(),t.stopPropagation();const o=S.current;o&&(C.current=!0,k.current={startX:t.clientX,startY:t.clientY,width:o.offsetWidth,height:o.offsetHeight},window.addEventListener("pointermove",v),window.addEventListener("pointerup",w))},[v,w]);i.useEffect(()=>()=>{w()},[w]),i.useEffect(()=>{n&&b(!1)},[g,n]),i.useEffect(()=>{n||b(!1)},[n]);const _=async()=>{const t=P.trim();if(!t)return;const o={role:"user",text:t},A=[...D,o];if(j(A),Y(""),!q.trim()){j(d=>[...d,{role:"system",text:"Gemini API key is missing. Add VITE_GEMINI_API_KEY to your Vite environment (e.g. .env.local) before chatting."}]);return}N(!0);try{const d=ie(),a=await s(),h=[...A.map(x=>({role:x.role==="system"?"model":x.role,parts:[{text:x.text}]})),{role:"user",parts:[{text:`You are a helpful BIM assistant who can describe models and help users explore geometry.
Follow these instructions carefully:
- Always provide clear, concise answers grounded in the supplied model data.
- ${te}
Based on the following model data, please answer the user's question.
---
MODEL DATA:
${a}
---
USER QUESTION:
${t}`}]}],G=(await d.generateContent({contents:h})).response.text(),{cleaned:m,command:E}=ne(G),z={role:"model",text:m};if(j(x=>[...x,z]),E&&typeof l=="function")try{l(E)}catch(x){console.error("Failed to handle AI selection command",x)}}catch(d){console.error("Error calling Gemini API:",d);let a="Sorry, I encountered an error while talking to Gemini.";const c=d,h=c?.message??(d instanceof Error?d.message:""),f=c?.status??c?.code??"",u=typeof h=="string"?h.toLowerCase():"";if(h==="MISSING_GEMINI_KEY")a="Gemini API key is missing. Set VITE_GEMINI_API_KEY and reload the app.";else if(u.includes("401")||f===401)a="Gemini rejected the API key (401). Confirm the key is valid and has access to the requested model.";else if(u.includes("403")||f===403)a="Gemini returned 403. Ensure the project has access to this model and that billing is enabled.";else if(u.includes("404")||f===404)a="Gemini returned 404 for this model. Verify the model name and availability in your project (use ListModels in Google AI Studio or switch to a supported variant).";else if(u.includes("429")||f===429){const m=typeof c?.error?.error?.details?.[2]?.retryDelay=="string"?c.error.error.details[2].retryDelay:c?.error?.error?.details?.find?.(z=>typeof z?.retryDelay=="string")?.retryDelay;a=`Gemini quota exceeded (429). You've hit the free tier input-token limit. ${m?` Please wait ~${m.replace(/s$/," seconds")} before retrying.`:""} Consider reducing prompt size, waiting a minute, or upgrading quota.`}else(u.includes("quota")||u.includes("limit"))&&(a="Gemini reported a quota issue. Check your plan, reduce prompt size, or wait before retrying.");if(typeof c?.error=="object"){const m=c.error?.error?.details?.find?.(E=>typeof E?.retryDelay=="string");!a.includes("quota")&&m?.retryDelay&&(a+=` Gemini suggests waiting ~${m.retryDelay.replace(/s$/," seconds")} before retrying.`)}const G={role:"system",text:a};j(m=>[...m,G])}finally{N(!1)}};return n?e.jsx(H,{nodeRef:S,handle:".chat-header",bounds:"parent",children:e.jsxs(L,{ref:S,elevation:8,sx:{position:"fixed",bottom:40,right:40,width:R.width,height:r?"auto":R.height,minWidth:320,maxWidth:"90vw",minHeight:r?"auto":260,maxHeight:"85vh",zIndex:2e3,display:"flex",flexDirection:"column",boxSizing:"border-box",overflow:"hidden"},children:[e.jsxs(I,{className:"chat-header",sx:{display:"flex",justifyContent:"space-between",alignItems:"center",padding:"4px 8px",backgroundColor:"primary.main",color:"white",cursor:"move"},children:[e.jsx(B,{variant:"subtitle1",children:"BIM AI Assistant"}),e.jsxs(I,{sx:{display:"flex",alignItems:"center",gap:.5},children:[e.jsx(T,{size:"small",onClick:()=>b(!r),color:"inherit",title:r?"Expand panel":"Minimize panel",children:r?e.jsx(K,{}):e.jsx(U,{})}),e.jsx(T,{size:"small",onClick:()=>{b(!1),p()},color:"inherit",title:"Close BIM AI Assistant",children:e.jsx(V,{})})]})]}),!r&&e.jsxs(e.Fragment,{children:[e.jsxs(I,{sx:{flex:1,overflowY:"auto",padding:2,minHeight:0},children:[D.map((t,o)=>e.jsx(I,{sx:{marginBottom:1,textAlign:t.role==="user"?"right":"left"},children:e.jsx(L,{elevation:1,sx:{padding:1,display:"inline-block",backgroundColor:t.role==="user"?"primary.light":t.role==="system"?"grey.200":"white"},children:e.jsxs(B,{variant:"body2",children:[e.jsxs("strong",{children:[t.role==="model"?"AI":t.role==="system"?"System":"You",":"]})," ",t.text]})})},o)),M&&e.jsx(X,{size:24,sx:{display:"block",margin:"10px auto"}})]}),e.jsxs(I,{sx:{padding:1,borderTop:"1px solid #ddd",display:"flex"},children:[e.jsx(J,{fullWidth:!0,variant:"outlined",size:"small",placeholder:"Ask about the model...",value:P,onChange:t=>Y(t.target.value),onKeyPress:t=>t.key==="Enter"&&!M&&_(),disabled:M}),e.jsx(Q,{variant:"contained",onClick:_,disabled:M,sx:{marginLeft:1},children:"Send"})]}),e.jsx(I,{onPointerDown:W,sx:{position:"absolute",bottom:6,right:6,width:16,height:16,cursor:"nwse-resize",borderRight:"2px solid",borderBottom:"2px solid",borderColor:"divider",opacity:.6,"&:hover":{opacity:1}}})]})]})}):e.jsx(L,{elevation:6,sx:{position:"fixed",bottom:20,right:20,zIndex:2100},children:e.jsx(T,{onClick:y,title:"Open BIM AI Assistant",children:e.jsx($,{})})})};export{oe as default};
